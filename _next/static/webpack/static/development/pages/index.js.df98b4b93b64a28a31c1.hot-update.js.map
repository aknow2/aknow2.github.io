{"version":3,"file":"static/webpack/static/development/pages/index.js.df98b4b93b64a28a31c1.hot-update.js","sources":["webpack:///./components/App.tsx"],"sourcesContent":["import * as React from 'react';\nimport { withStyles, Button, Slide, Dialog, IconButton } from '@material-ui/core';\nimport Menu from '@material-ui/icons/Menu';\nimport Cancel from '@material-ui/icons/Cancel';\nimport { StyleRules, WithStyles } from '@material-ui/core/styles';\nimport Top from './Top';\nimport MyPrj from './MyPrj';\nimport Terms from './TermAndPolicy';\nimport zIndex from '@material-ui/core/styles/zIndex';\n\nconst styles: StyleRules<'root'|'menuButton'|'term'|'contact'|'top'|'tab'|'myProject'|'surface'> = {\n  root: {\n    position: 'relative',\n    top: 0,\n    bottom:0,\n    left:0,\n    margin: 0,\n    height: '100vh',\n    width: '100%',\n    perspective: '80vh',\n  },\n  menuButton: {\n    position: 'absolute',\n    zIndex: 10,\n    right: 0,\n    top: 0,\n    marginRight: 10,\n    marginTop: 10,\n  },\n  surface: {\n    transformOrigin: '50% 50% -90vh',\n    position: 'absolute',\n    transformStyle: 'preserve-3d',\n    left: '0',\n    top: '0',\n    width: '100%',\n    height: '100vh',\n  },\n  top: {\n    color: '#FFFFFF',\n    zIndex: 2,\n    backgroundColor: '#2F2F2F',\n  },\n  myProject: {\n    zIndex: 1,\n    color: '#FFFFFF',\n    backgroundColor: '#2F2F2F',\n  },\n  contact: {\n    zIndex: 1,\n    backgroundColor: '#2F2F2F',\n  },\n  term: {\n    zIndex: 1,\n    backgroundColor: '#2F2F2F',\n  },\n  tab: {\n    color: '#FFFFFF'\n  },\n};\n\ntype ClassNames = keyof typeof styles;\n\ninterface Surface {\n    x: number;\n    style: React.CSSProperties;\n}\n\ninterface AppState {\n  showMenu: boolean;\n  path?: string;\n  menuIn: boolean;\n  top: Surface;\n  myProject: Surface;\n  term: Surface;\n  contact: Surface;\n}\nconst getZindex = (x: number) => {\n  const absX = Math.abs(x)/60;\n  switch(absX){\n    case 0:\n      return 5;\n    case 1:\n      return 4;\n    case 2: \n      return 3;\n    default: \n      return 0;\n  }\n}\n\nconst initSurfaceGenerator = function* (base: number){\n  const deg = -60;\n  let ratio = 0;\n  while(true) {\n    const toDeg = base + deg * ratio;\n    yield {\n        x: toDeg,\n        style: {\n          transform: `rotateX(${toDeg}deg)`,\n          zIndex: getZindex(toDeg)\n        }\n    } as Surface;\n    ratio++;\n  }\n};\n\nexport enum InitPos {\n  top=0,\n  myPrj=60,\n  tp=120,\n}\n\nexport interface AppPorps {\n  initPos: InitPos;\n}\n\nclass App extends React.Component<WithStyles<ClassNames> & AppPorps, AppState> {\n\n  private topElemet: HTMLDivElement;\n\n  constructor(props: WithStyles<ClassNames> & AppPorps) {\n    super(props);\n    const itr = initSurfaceGenerator(props.initPos);\n    this.state = {\n      showMenu: false,\n      menuIn: true,\n      top: itr.next().value,\n      myProject: itr.next().value,\n      term: itr.next().value,\n      contact: itr.next().value,\n    };\n  }\n\n  public render() {\n    const {classes} = this.props;\n    const {top, myProject, term, menuIn, showMenu } = this.state;\n    return (\n      <div className={classes.root}>\n        <Slide direction=\"left\" in={menuIn}>\n          <div className={classes.menuButton}>\n            <Button onClick={this.showMenu}>\n              <Menu style={{color: '#B0B0B0'}} fontSize={'large'}/>\n            </Button>\n          </div>\n        </Slide>\n        <div\n          className={classes.surface+' '+classes.top}\n          style={top.style}\n          ref={this.refTop} >\n            <Top next={this.toMyProject}/>\n        </div>\n        <div className={classes.surface+' '+classes.myProject} style={myProject.style}>\n          <MyPrj titleIn={menuIn} />\n        </div>\n        <div className={classes.surface+' '+classes.term} style={term.style}>\n          <Terms headerIn={menuIn} path={this.state.path}/>\n        </div>\n        <Dialog\n          open={showMenu}\n          fullScreen={true}\n        >\n         <div \n          style={{\n            width: '100%',\n            position: 'relative',\n            height: '100%',\n            backgroundColor: '#404040',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n         >\n            <IconButton \n              style={{\n                position: 'absolute',\n                top: 10,\n                right: 20,\n              }}\n              onClick={this.closeMenu}\n            >\n              <Cancel fontSize={'large'} style={{color: '#c0c0c0'}}/>\n            </IconButton>\n              <Button style={{color: '#c0c0c0', fontSize: 48}} onClick={this.toTop}>\n                About\n              </Button>\n              <Button style={{color: '#c0c0c0', fontSize: 48}} onClick={this.toMyProject}>\n                My project\n              </Button>\n              <Button style={{color: '#c0c0c0', fontSize: 48}} onClick={this.toTerms}>\n                Terms\n              </Button>\n         </div>\n        </Dialog>\n      </div>\n    );\n  }\n\n  private showMenu = () => {\n    this.setState({showMenu: true});\n  }\n\n  private closeMenu = () => {\n    this.setState({showMenu: false});\n  }\n\n  private refTop = (ref: HTMLDivElement|null) => {\n    if (ref) {\n      this.topElemet = ref;\n    }\n  }\n  private toMyProject = () => {\n    this.closeMenu();\n    const deltaX = -1 * this.state.myProject.x;\n    this.rotate(deltaX);\n }\n private toTerms = () => {\n    this.closeMenu();\n    const deltaX = -1 * this.state.term.x;\n    this.rotate(deltaX);\n }\n \n  private toTop = () => {\n    this.closeMenu();\n    const deltaX = -1 * this.state.top.x;\n    this.rotate(deltaX);\n }\n\n private rotate = (deltaX: number) => {\n\n    if (deltaX === 0) {\n      return;\n    }\n\n    const scale = 0.2;\n    const orgTop = this.state.top; \n    const orgMyPrj = this.state.myProject; \n    const orgTerm = this.state.term; \n    const orgPolicy = this.state.contact; \n\n    const baseDeg = 60;\n    const zoomTransitionTime = 0.2;\n    const transitionTime = 0.5*((Math.abs(deltaX))/baseDeg);\n    const topDeltaX = orgTop.x + deltaX;\n    const myPrjDeltaX = orgMyPrj.x + deltaX;\n    const termDeltaX = orgTerm.x + deltaX;\n    const policyDeltaX = orgPolicy.x + deltaX;\n\n\n    const createRotateSurface = (delta: number) => {\n      return {\n          x: delta,\n          style: {\n            transform: `scale(${scale}) rotateX(${delta}deg)`,\n            transition: `${transitionTime}s`,\n            zIndex: getZindex(delta)\n          }\n        } as Surface;\n    };\n\n    const createZoomSurface = (delta: number) => {\n      return  {\n          x: delta,\n          style: {\n            transform: `scale(1) rotateX(${delta}deg)`,\n            transition: `${zoomTransitionTime}s`,\n            zIndex: getZindex(delta)\n          }\n        } as Surface;\n    };\n \n    function* animationSequence(){\n      yield {\n        top: createRotateSurface(topDeltaX),\n        myProject: createRotateSurface(myPrjDeltaX),\n        term: createRotateSurface(termDeltaX),\n        contact: createRotateSurface(policyDeltaX)\n      } as AppState;       \n      yield {\n        top: createZoomSurface(topDeltaX),\n        myProject: createZoomSurface(myPrjDeltaX),\n        term: createZoomSurface(termDeltaX),\n        contact: createZoomSurface(policyDeltaX),\n      } as AppState;   \n    }\n    \n    const itr = animationSequence();\n\n    const listener = () => {\n      const result = itr.next();\n\n      const newState = result.value;\n      if (newState) {\n        this.setState(newState);\n      }\n\n      if (result.done) {\n        this.topElemet.removeEventListener('transitionend', listener);\n        this.setState({\n          menuIn: true\n        });\n      }\n    };\n    this.topElemet.addEventListener('transitionend', listener);\n    this.setState({\n      menuIn: false\n    });\n    const createZoomOutSurface = (org: Surface) => {\n      return {\n        x: org.x,\n        style: {\n          transform: `scale(${scale}) rotateX(${org.x}deg)`,\n          transition: `${zoomTransitionTime}s`,\n          zIndex: getZindex(org.x)\n        }\n      }\n    } \n    this.setState({\n      top: createZoomOutSurface(orgTop),\n      myProject: createZoomOutSurface(orgMyPrj),\n      term: createZoomOutSurface(orgTerm),\n      contact:createZoomOutSurface(orgPolicy),\n    });\n  }\n}\n\n\nexport default withStyles<{} & ClassNames>(styles)(App);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AA9CA;AACA;AAkEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AARA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AAGA;AAJA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAFA;AACA;AANA;AAYA;AAZA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;;;;;AAIA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA+EA;AAAA;AAAA;AACA;AACA;AAjFA;AAmFA;AAAA;AAAA;AACA;AACA;AArFA;AAuFA;AACA;AACA;AACA;AACA;AA3FA;AA4FA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAhGA;AAiGA;AACA;AAAA;AACA;AAAA;AACA;AACA;AArGA;AAuGA;AACA;AAAA;AACA;AAAA;AACA;AACA;AA3GA;AA4GA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAFA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAJA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcaA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AAhFA;AACA;AAkNA;;;;A","sourceRoot":""}